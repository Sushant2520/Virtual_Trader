const express = require('express'); const router = express.Router();
const User = require('../models/User'); const bcrypt = require('bcryptjs'); const jwt = require('jsonwebtoken');
const JWT_SECRET = process.env.JWT_SECRET || 'devsecret';
router.post('/signup', async (req,res)=>{ const {name,email,password} = req.body; if(!email||!password) return res.status(400).json({message:'email/password required'}); const exists = await User.findOne({email}); if(exists) return res.status(400).json({message:'email taken'}); const hash = await bcrypt.hash(password,10); const user = await User.create({name,email,passwordHash:hash,balance:10000}); const token = jwt.sign({id:user._id,email:user.email,role:user.role}, JWT_SECRET); res.json({token,user:{id:user._id,email:user.email,name:user.name,balance:user.balance,role:user.role}}); });
router.post('/login', async (req,res)=>{ const {email,password} = req.body; const user = await User.findOne({email}); if(!user) return res.status(400).json({message:'invalid'}); const ok = await bcrypt.compare(password,user.passwordHash); if(!ok) return res.status(400).json({message:'invalid'}); const token = jwt.sign({id:user._id,email:user.email,role:user.role}, JWT_SECRET); res.json({token,user:{id:user._id,email:user.email,name:user.name,balance:user.balance,role:user.role}}); });
module.exports = router;
